function [x_opt, history] = custom_lsq_optimizer(fun, x0, lb, ub, options)
% –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–Ω–∞–ª–æ–≥ lsqnonlin —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —à–∞–≥–∞ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º line search
%
% –í—Ö–æ–¥–Ω—ã–µ:
%   fun    ‚Äî –≤–µ–∫—Ç–æ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–≤—è–∑–∫–∏
%   x0     ‚Äî –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
%   lb, ub ‚Äî –Ω–∏–∂–Ω–∏–µ –∏ –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
%   options.step_init ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ (–Ω–∞–ø—Ä. 1.0)
%   options.step_min  ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ (–Ω–∞–ø—Ä. 1e-6)
%   options.max_iter  ‚Äî –º–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π
%   options.grad_eps  ‚Äî —à–∞–≥ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞

    % –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if ~isfield(options, 'step_init'), options.step_init = 10.0; end
    if ~isfield(options, 'step_min'),  options.step_min  = 1e-1; end
    if ~isfield(options, 'max_iter'),  options.max_iter  = 100; end
    if ~isfield(options, 'grad_eps'),  options.grad_eps  = 1e-6; end

    step_size = options.step_init;
    step_min = options.step_min;
    max_iter = options.max_iter;
    grad_eps = options.grad_eps;

    x = x0;
    history = struct('fval', [], 'grad_norm', [], 'step', []);
    n = length(x);

    for iter = 1:max_iter
        r = fun(x);
        fval = sum(r.^2);

        % –ß–∏—Å–ª–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        grad = zeros(n, 1);
        for i = 1:n
            x_perturb = x;
            x_perturb(i) = x_perturb(i) + grad_eps;
            r_perturb = fun(x_perturb);
            grad(i) = (sum(r_perturb.^2) - fval) / grad_eps;
        end

        grad_norm = norm(grad);

        % Line search (–∂—ë—Å—Ç–∫–∏–π –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥)
alpha = step_size;
rho = 0.5;
c = 1e-4;
max_ls = 20;

success = false;

for ls_iter = 1:max_ls
    if alpha < step_min
        alpha = step_min;
        fprintf('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ (%.1e), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º\n', alpha);
    end

    x_trial = x - alpha * grad;
    x_trial = max(min(x_trial, ub), lb);
    f_trial = sum(fun(x_trial).^2);

    if f_trial < fval - c * alpha * (grad' * grad)
        success = true;
        break;
    end

    if alpha == step_min
        break; % –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    end

    alpha = max(alpha * rho, step_min);
end

if ~success
    fprintf('‚ö†Ô∏è Line search –Ω–µ –Ω–∞—à—ë–ª —É–ª—É—á—à–µ–Ω–∏—è ‚Äî –∏–¥—ë–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —à–∞–≥–æ–º\n');
end
        

        % –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        x = x - alpha * grad;
        x = max(min(x, ub), lb);

        % –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        fprintf('üîÅ –ò—Ç–µ—Ä–∞—Ü–∏—è %d: fval = %.4e, ||‚àáf|| = %.2e, step = %.2e\n', ...
            iter, fval, grad_norm, alpha);

        history.fval(end+1) = fval;
        history.grad_norm(end+1) = grad_norm;
        history.step(end+1) = alpha;

        % –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        save('checkpoint_opt.mat', 'x', 'fval', 'iter', 'grad', 'alpha');

        % –£—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if grad_norm < 1e-4 || alpha < step_min
            fprintf('‚úÖ –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ %d\n', iter);
            break;
        end
    end

    x_opt = x;
end
